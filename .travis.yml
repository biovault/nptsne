language: python
python:
  - 3.7

stages:
  # Testing is part of build- using the CIBW_TEST_COMMAND
  - build
  # Tagged builds are for release to PyPI
  - name: deploy to pypi
    if: tag IS present
  # Untagged builds are for test in TestPyPI
  - name: deploy to testpypi
    if: tag IS not present

# yaml anchor for upload to artifactory wheels dir 
_wheelhouse_upload: &_wheelhouse_upload
  - echo "Check wheelhouse"
  - ls ./wheelhouse 
  - cmake -D WHEEL_GLOB=./wheelhouse/nptsne*.whl -D BUILD_NUMBER=$TRAVIS_BUILD_NUMBER -P ./cmake/UploadWheel.cmake

_deploy_install: &_deploy_install
  - python3 -m pip install twine
  - mkdir $HOME/twine
  - cd $HOME/twine
  - export CACHE_URL=
  - wget -r -np -nH --cut-dirs 5 -A '*manylinux*.whl' http://cytosplore.lumc.nl:8081/artifactory/wheels/nptsne/build_${TRAVIS_BUILD_NUMBER}/
  - ls -al $HOME/twine

branches: 
  only: 
    - /feature\/.*/
    - release/1.0.0
    - master
    
env: 
  global: 
    - CIBW_TEST_COMMAND="python {project}/test/run_doctest.py"
    - CONAN_LOGIN_USERNAME="admin"
    - CONAN_PASSWORD=$CONAN_PASSWORD_SECRET
    - CONAN_UPLOAD="http://cytosplore.lumc.nl:8081/artifactory/api/conan/conan-local"
    - CONAN_STABLE_BRANCH_PATTERN="release/*"
    - CONAN_UPLOAD_ONLY_WHEN_STABLE=1
    - TWINE_USER=bldrvnlw
    - TWINE_PYPI_PASSWORD=$PYPI_PASSWORD_SECRET
    - TWINE_TESTPYPI_PASSWORD=$TESTPYPI_PASSWORD_SECRET
    - BUILD_LINUX=false
    - BUILD_OSX=true
    
jobs: 
  include: 
  
  # Build on Linux
  - stage: build
    name: Build linux bdist wheels
    if: env(BUILD_LINUX) = true
    services: docker
    install:
    # Runs in the vm context where cibuildwheel is launched
    - python3 -m pip install cibuildwheel>=1.5.2
    
    script: 
    - "set -e"
    - "cibuildwheel --output-dir wheelhouse"
    after_success:
      *_wheelhouse_upload
    env:
      - CONAN_GCC_VERSIONS=8 
      - CONAN_BUILD_TYPES=Release
      - CONAN_ARCHS=x86_64 
      - CMAKE_GENERATOR="Unix Makefiles"
      - CONAN_OPTIONS="nptsne:python_version=3.7"
      - COMPILER=g++-8
      - CC=gcc-8
      - CXX=g++-8
      - LIBCXX=libstdc++ 
      - LIBSDIR=/tmp/cibwlibsdir
      - CIBW_SKIP="cp2* cp35-* pp*"
      - CIBW_BUILD=cp3*-manylinux_x86_64
      - CIBW_BUILD_VERBOSITY=3
      - CIBW_ENVIRONMENT="BUILD_GLFW=TRUE NPTSNE_BUILD_WITH_CONAN=TRUE LIBSDIR=/tmp/cibwlibsdir CI=TRUE"
      # The following run in the container context (building manylinux)
      - CIBW_BEFORE_ALL_LINUX="bash {project}/.ci/prepare_build_linux.sh" 
      - CIBW_BEFORE_BUILD="rm -rf /tmp/cibwlibsdir; mkdir -p /tmp/cibwlibsdir; pip install --upgrade pip; pip install -r requirements.txt; source ./.ci/prepare_conan.sh"
      - CIBW_REPAIR_WHEEL_COMMAND_LINUX='export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/tmp/cibwlibsdir; echo "Lib path for repair $LD_LIBRARY_PATH"; auditwheel repair -w {dest_dir} {wheel}'

  # Build on OS X
  - stage: build
    name: Build OS X bdist wheels
    if: env(BUILD_OSX) = true
    os: osx
    osx_image: xcode11.2
    language: shell
    install:
    # Runs in the vm context where cibuildwheel is launched
    - python3 -m pip install cibuildwheel>=1.5.2
    
    script: 
    - "set -e"
    - "python3 -m cibuildwheel --output-dir wheelhouse"
    after_success:
      *_wheelhouse_upload
    env:
      - CONAN_APPLE_CLANG_VERSIONS=10.0
      - CONAN_BUILD_TYPES=Release
      - CONAN_ARCHS=x86_64
      - CONAN_IS_TRAVIS_OSX=1 
      - LIBSDIR=/tmp/cibwlibsdir
      - CIBW_SKIP="cp2* pp*"
      - CIBW_BUILD=cp37-macosx_x86_64
      - CIBW_BUILD_VERBOSITY=3
      - CIBW_ENVIRONMENT="BUILD_GLFW=TRUE NPTSNE_BUILD_WITH_CONAN=TRUE LIBSDIR=/tmp/cibwlibsdir CI=TRUE"
      # The following run in the container context (building manylinux)
      - CIBW_BEFORE_ALL_LINUX="bash {project}/.ci/prepare_build_linux.sh" 
      - CIBW_BEFORE_BUILD="rm -rf /tmp/cibwlibsdir; mkdir -p /tmp/cibwlibsdir; pip install --upgrade pip; pip install -r requirements.txt; source ./.ci/prepare_conan.sh"
      - CIBW_REPAIR_WHEEL_COMMAND_LINUX='export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/tmp/cibwlibsdir; echo "Lib path for repair $LD_LIBRARY_PATH"; auditwheel repair -w {dest_dir} {wheel}'
  
  # Deploy to testpypi if not tagged
  - stage: deploy to testpypi
    install:
        *_deploy_install
    script:
      - python -m twine upload -u $TWINE_USER -p $TWINE_TESTPYPI_PASSWORD --repository testpypi $HOME/twine/*.whl

  # Deploy to pypi if tagged
  - stage: deploy to pypi
    install:
        *_deploy_install
    script:
      - python -m twine upload  -u $TWINE_USER -p $TWINE_PYPI_PASSWORD $HOME/twine/*.whl

     # - stage: build
       # name: Build macOS wheels without OpenMP
       # <<: *osx
       # language: generic
       # osx_image: xcode9.4
       # python: "3.7"
       # script: python3 -m cibuildwheel --output-dir wheelhouse
       # env: 
         # - CONAN_BUILD_TYPES=Release
         # - CONAN_ARCHS=x86_64
         # - CONAN_IS_TRAVIS_OSX=1 
         # - OSX_PYTHON=3.7
         # - CMAKE_GENERATOR="Xcode"
         # - CONAN_OPTIONS="nptsne:python_version=3.7"
         # - CIBW_BEFORE_BUILD_MACOS="'export SDKROOT=$(xcodebuild -version -sdk macosx Path)'"
         # - CIBW_BUILD=cp37-macosx_x86_64
         # - HOMEBREW_NO_AUTO_UPDATE=1


     # - stage: build
       # name: Build macOS wheels with OpenMP
       # <<: *osx
       # language: generic
       # osx_image: xcode10.3
       # python: "3.7"
       # script: python3 -m cibuildwheel --output-dir wheelhouse
       # env: 
         # - CONAN_BUILD_TYPES=Release
         # - CONAN_ARCHS=x86_64
         # - CONAN_IS_TRAVIS_OSX=1 
         # - OSX_PYTHON=3.7
         # - CMAKE_GENERATOR="Xcode"
         # - CONAN_OPTIONS="nptsne:python_version=3.7"
         # - CIBW_BEFORE_BUILD_MACOS="'export SDKROOT=$(xcodebuild -version -sdk macosx Path)'"
         # - CIBW_BUILD=cp37-macosx_x86_64
         # - HOMEBREW_NO_AUTO_UPDATE=1
